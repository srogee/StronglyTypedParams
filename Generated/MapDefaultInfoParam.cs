
            namespace StronglyTypedParams
            {
                public class MapDefaultInfoParam : ParamRow
                {
                    public MapDefaultInfoParam() : base()
                    {
                    }
            

            // Def="u8 disableParam_NT:1"
            /// <summary>
            /// Disable Param - Network Test (u8)
            /// </summary>
            /// <remarks>
            /// Parameters marked with â—‹ are excluded in the NT version package.
            /// </remarks>
            public byte DisableParamNetworkTest 
            {
                get => (byte)CellsByName["DisableParamNetworkTest"].Value;
                set => CellsByName["DisableParamNetworkTest"].Value = value;
            }
            

            // Def="dummy8 disableParamReserve1:7"
            /// <summary>
            /// Reserve for package output 1 (dummy8)
            /// </summary>
            /// <remarks>
            /// Reserve for package output 1
            /// </remarks>
            public object ReserveForPackageOutput1 
            {
                get => (object)CellsByName["ReserveForPackageOutput1"].Value;
                set => CellsByName["ReserveForPackageOutput1"].Value = value;
            }
            

            // Def="dummy8 disableParamReserve2[3]"
            /// <summary>
            /// Reserve for package output 2 (dummy8)
            /// </summary>
            /// <remarks>
            /// Reserve for package output 2
            /// </remarks>
            public object ReserveForPackageOutput2 
            {
                get => (object)CellsByName["ReserveForPackageOutput2"].Value;
                set => CellsByName["ReserveForPackageOutput2"].Value = value;
            }
            

            // Def="u32 EnableFastTravelEventFlagId"
            /// <summary>
            /// Enable Fast Travel Event Flag ID (u32)
            /// </summary>
            /// <remarks>
            /// Fast travel permission flag ID
            /// </remarks>
            public uint EnableFastTravelEventFlagID 
            {
                get => (uint)CellsByName["EnableFastTravelEventFlagID"].Value;
                set => CellsByName["EnableFastTravelEventFlagID"].Value = value;
            }
            

            // Def="s32 WeatherLotTimeOffsetIngameSeconds"
            /// <summary>
            /// Weather Lot - Time Offset (s32)
            /// </summary>
            /// <remarks>
            /// Offset for weather lottery time (unit: in-game seconds). Divide by the in-game time scale of the game properties to get real time
            /// </remarks>
            public int WeatherLotTimeOffset 
            {
                get => (int)CellsByName["WeatherLotTimeOffset"].Value;
                set => CellsByName["WeatherLotTimeOffset"].Value = value;
            }
            

            // Def="s8 WeatherCreateAssetLimitId = -1"
            /// <summary>
            /// Weather Create Asset Limit ID (s8)
            /// </summary>
            /// <remarks>
            /// ID used to limit the generation of assets generated by the weather asset generation parameter .xlsm
            /// </remarks>
            public sbyte WeatherCreateAssetLimitID 
            {
                get => (sbyte)CellsByName["WeatherCreateAssetLimitID"].Value;
                set => CellsByName["WeatherCreateAssetLimitID"].Value = value;
            }
            

            // Def="u8 MapAiSightType"
            /// <summary>
            /// Map Visibility Type (u8)
            /// </summary>
            /// <remarks>
            /// Map visibility type
            /// </remarks>
            public byte MapVisibilityType 
            {
                get => (byte)CellsByName["MapVisibilityType"].Value;
                set => CellsByName["MapVisibilityType"].Value = value;
            }
            

            // Def="u8 SoundIndoorType"
            /// <summary>
            /// Sound Indoor Type (u8)
            /// </summary>
            /// <remarks>
            /// Set whether to divide the map GD setting "indoor" into "indoor" or "completely indoor" for sound (SEQ09833).
            /// </remarks>
            public byte SoundIndoorType 
            {
                get => (byte)CellsByName["SoundIndoorType"].Value;
                set => CellsByName["SoundIndoorType"].Value = value;
            }
            

            // Def="s8 ReverbDefaultType = -1"
            /// <summary>
            /// Reverb Default Type (s8)
            /// </summary>
            /// <remarks>
            /// Specifies the reverb default type for this map
            /// </remarks>
            public sbyte ReverbDefaultType 
            {
                get => (sbyte)CellsByName["ReverbDefaultType"].Value;
                set => CellsByName["ReverbDefaultType"].Value = value;
            }
            

            // Def="s16 BgmPlaceInfo"
            /// <summary>
            /// BGM Location Info (s16)
            /// </summary>
            /// <remarks>
            /// Specify location default information for BGM
            /// </remarks>
            public short BGMLocationInfo 
            {
                get => (short)CellsByName["BGMLocationInfo"].Value;
                set => CellsByName["BGMLocationInfo"].Value = value;
            }
            

            // Def="s16 EnvPlaceInfo"
            /// <summary>
            /// Environmental Location Info (s16)
            /// </summary>
            /// <remarks>
            /// Specifies location default information for ambient sounds
            /// </remarks>
            public short EnvironmentalLocationInfo 
            {
                get => (short)CellsByName["EnvironmentalLocationInfo"].Value;
                set => CellsByName["EnvironmentalLocationInfo"].Value = value;
            }
            

            // Def="s32 MapAdditionalSoundBankId = -1"
            /// <summary>
            /// Map Additional Sound Bank ID (s32)
            /// </summary>
            /// <remarks>
            /// Specify the ID of the "map addition bank" of the sound to be additionally loaded (-1: no map addition bank) (SEQ15725)
            /// </remarks>
            public int MapAdditionalSoundBankID 
            {
                get => (int)CellsByName["MapAdditionalSoundBankID"].Value;
                set => CellsByName["MapAdditionalSoundBankID"].Value = value;
            }
            

            // Def="s16 MapHeightForSound"
            /// <summary>
            /// Map Height Info for Sound (s16)
            /// </summary>
            /// <remarks>
            /// Map height information for sound [m] (SEQ15727)
            /// </remarks>
            public short MapHeightInfoForSound 
            {
                get => (short)CellsByName["MapHeightInfoForSound"].Value;
                set => CellsByName["MapHeightInfoForSound"].Value = value;
            }
            

            // Def="u8 IsEnableBlendTimezoneEnvmap = 1"
            /// <summary>
            /// Enable Blend Timezone Envmap (u8)
            /// </summary>
            /// <remarks>
            /// Specifies whether to time blend the environment map. Only Texure in the 0th time zone is shot and used. GPU load and memory are reduced. This setting is valid only for Legacy (m00-m49) (SEQ16464).
            /// </remarks>
            public byte EnableBlendTimezoneEnvmap 
            {
                get => (byte)CellsByName["EnableBlendTimezoneEnvmap"].Value;
                set => CellsByName["EnableBlendTimezoneEnvmap"].Value = value;
            }
            

            // Def="s8 OverrideGIResolution_XSS = -1"
            /// <summary>
            /// Override GI Resolution - XSS (s8)
            /// </summary>
            /// <remarks>
            /// Overwrites the GI resolution used in XSS (Xbox SeriesS, Lockhart)
            /// </remarks>
            public sbyte OverrideGIResolutionXSS 
            {
                get => (sbyte)CellsByName["OverrideGIResolutionXSS"].Value;
                set => CellsByName["OverrideGIResolutionXSS"].Value = value;
            }
            

            // Def="f32 MapLoHiChangeBorderDist_XZ = 40"
            /// <summary>
            /// Map High Hit Switch - AABB Depth (f32)
            /// </summary>
            /// <remarks>
            /// Map high hit switching judgment AABB_width Depth (XZ) [m] (SEQ16295)
            /// </remarks>
            public float MapHighHitSwitchAABBDepth 
            {
                get => (float)CellsByName["MapHighHitSwitchAABBDepth"].Value;
                set => CellsByName["MapHighHitSwitchAABBDepth"].Value = value;
            }
            

            // Def="f32 MapLoHiChangeBorderDist_Y = 40"
            /// <summary>
            /// Map High Hit Switch - AABB Height (f32)
            /// </summary>
            /// <remarks>
            /// Map high hit switching judgment AABB_ height (Y) [m] (SEQ16295)
            /// </remarks>
            public float MapHighHitSwitchAABBHeight 
            {
                get => (float)CellsByName["MapHighHitSwitchAABBHeight"].Value;
                set => CellsByName["MapHighHitSwitchAABBHeight"].Value = value;
            }
            

            // Def="f32 MapLoHiChangePlayDist = 5"
            /// <summary>
            /// Map High Hit Switch - Play Distance (f32)
            /// </summary>
            /// <remarks>
            /// Map high hit switching judgment play distance [m]. Normally the default should be fine. For smaller AABB, adjust as needed. If the play is too small, switching will occur frequently. Not expected if larger than AABB size (SEQ 16295)
            /// </remarks>
            public float MapHighHitSwitchPlayDistance 
            {
                get => (float)CellsByName["MapHighHitSwitchPlayDistance"].Value;
                set => CellsByName["MapHighHitSwitchPlayDistance"].Value = value;
            }
            

            // Def="u32 MapAutoDrawGroupBackFacePixelNum = 32400"
            /// <summary>
            /// Automatic Draw Group - Back Side Pixel Count (u32)
            /// </summary>
            /// <remarks>
            /// Number of pixels to be judged on the back side in automatic drawing group calculation
            /// </remarks>
            public uint AutomaticDrawGroupBackSidePixelCount 
            {
                get => (uint)CellsByName["AutomaticDrawGroupBackSidePixelCount"].Value;
                set => CellsByName["AutomaticDrawGroupBackSidePixelCount"].Value = value;
            }
            

            // Def="f32 PlayerLigntScale = 1"
            /// <summary>
            /// Player Light Scale (f32)
            /// </summary>
            /// <remarks>
            /// Specify the scale to be applied to the PC and PC horse resident light source on this map (SEQ16562).
            /// </remarks>
            public float PlayerLightScale 
            {
                get => (float)CellsByName["PlayerLightScale"].Value;
                set => CellsByName["PlayerLightScale"].Value = value;
            }
            

            // Def="u8 IsEnableTimezonnePlayerLigntScale = 1"
            /// <summary>
            /// Enable Timezone Player Light Scale (u8)
            /// </summary>
            /// <remarks>
            /// Does this map change the Player light intensity scale depending on the PC, PC horse resident light source, and time zone? (SEQ 16562)
            /// </remarks>
            public byte EnableTimezonePlayerLightScale 
            {
                get => (byte)CellsByName["EnableTimezonePlayerLightScale"].Value;
                set => CellsByName["EnableTimezonePlayerLightScale"].Value = value;
            }
            

            // Def="u8 isDisableAutoCliffWind"
            /// <summary>
            /// Disable Automatic Cliff Wind (u8)
            /// </summary>
            /// <remarks>
            /// Do you want to disable automatic cliff wind SE? (SEQ15729)
            /// </remarks>
            public byte DisableAutomaticCliffWind 
            {
                get => (byte)CellsByName["DisableAutomaticCliffWind"].Value;
                set => CellsByName["DisableAutomaticCliffWind"].Value = value;
            }
            

            // Def="s16 OpenChrActivateThreshold = -1"
            /// <summary>
            /// Open Character Activation Threshold (s16)
            /// </summary>
            /// <remarks>
            /// Open character activation limit_evaluation value threshold
            /// </remarks>
            public short OpenCharacterActivationThreshold 
            {
                get => (short)CellsByName["OpenCharacterActivationThreshold"].Value;
                set => CellsByName["OpenCharacterActivationThreshold"].Value = value;
            }
            

            // Def="s32 MapMimicryEstablishmentParamId = -1"
            /// <summary>
            /// Map Mimicry Establishment Param ID (s32)
            /// </summary>
            /// <remarks>
            /// Mimicry probability parameter ID by map (SEQ22471)
            /// </remarks>
            public int MapMimicryEstablishmentParamID 
            {
                get => (int)CellsByName["MapMimicryEstablishmentParamID"].Value;
                set => CellsByName["MapMimicryEstablishmentParamID"].Value = value;
            }
            

            // Def="s8 OverrideGIResolution_XSX = -1"
            /// <summary>
            /// Override GI Resolution - XSX (s8)
            /// </summary>
            /// <remarks>
            /// Overwrites the GI resolution used on XSX (Xbox Series X, Anaconda)
            /// </remarks>
            public sbyte OverrideGIResolutionXSX 
            {
                get => (sbyte)CellsByName["OverrideGIResolutionXSX"].Value;
                set => CellsByName["OverrideGIResolutionXSX"].Value = value;
            }
            

            // Def="dummy8 Reserve[7]"
            /// <summary>
            /// Reserve (dummy8)
            /// </summary>
            /// <remarks>
            /// Reserve
            /// </remarks>
            public object Reserve 
            {
                get => (object)CellsByName["Reserve"].Value;
                set => CellsByName["Reserve"].Value = value;
            }
            
                }
            }
            